#!/usr/bin/env python3
"""
Wrapper script to provide the exact command format requested:
bench --site your-site postman-sync --doctype "User"
bench --site your-site postman-sync --module "QuickNotes"
"""

import argparse
import subprocess
import sys


def main():
    parser = argparse.ArgumentParser(
        description="Generate and sync API endpoints to Postman"
    )
    parser.add_argument("--doctype", help="DocType name for API generation")
    parser.add_argument("--module", help="Module name for API generation")
    parser.add_argument("--site", required=True, help="Site name")

    args = parser.parse_args()

    if args.doctype:
        # Generate APIs for single DocType
        cmd = [
            "bench",
            "--site",
            args.site,
            "execute",
            "frappe_postman_sync.generate_doctype_apis",
            "--args",
            f'["{args.doctype}"]',
        ]
        print(f"Generating APIs for DocType: {args.doctype}")

    elif args.module:
        # Generate APIs for entire module
        cmd = [
            "bench",
            "--site",
            args.site,
            "execute",
            "frappe_postman_sync.generate_module_apis",
            "--args",
            f'["{args.module}"]',
        ]
        print(f"Generating APIs for Module: {args.module}")

    else:
        print("Please specify --doctype or --module")
        sys.exit(1)

    # Execute the command
    try:
        result = subprocess.run(cmd, capture_output=True, text=True)
        print(result.stdout)
        if result.stderr:
            print(result.stderr)
        sys.exit(result.returncode)
    except Exception as e:
        print(f"Error executing command: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
